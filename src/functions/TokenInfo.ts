import { ChainId as PancakeChainId, Pair as PancakePair, Token as PancakeToken } from "@pancakeswap/sdk";
import { ChainId as ApeChainId, Pair as ApePair, Token as ApeToken } from "@gametoken/apeswap-sdk";


/**
 * 
 * @param token1 
 * @param token2 
 * @returns the address of the contract of the input pairs listed on pancakeswap
 */
export function generatePancakePairAddress(token1: PancakeToken, token2: PancakeToken) {
    let address = PancakePair.getAddress(token1, token2);
    return address;
}

/**
 * 
 * @param token1 
 * @param token2 
 * @returns the address of the contract of the input pairs listed on apeswap
 */
export function generateApePairAddress(token1: ApeToken, token2: ApeToken) {
    let address = ApePair.getAddress(token1, token2);
    return address;
}

/**
 * 
 * @param tokenSymbol the token symbol you want to assign to the token
 * @param tokenAddress the address of the contract of the token
 * @returns a token generated by pancakeswap sdk
 */
export function generatePancakeToken(tokenSymbol:string, tokenAddress: string) {
    let token = new PancakeToken(
        PancakeChainId.MAINNET,
        tokenAddress,
        18,
        tokenSymbol
    );
    return token;
}

/**
 * 
 * @param tokenSymbol the token symbol you want to assign to the token
 * @param tokenAddress the address of the contract of the token
 * @returns a token generated by apeswap sdk
 */
export function generateApeToken(tokenSymbol: string, tokenAddress: string) {
    let token = new ApeToken(
        ApeChainId.MAINNET,
        tokenAddress,
        18,
        tokenSymbol
    );
    return token;
}

